//ATM.h
#ifndef ATM_H
#define ATM_H
#define N 9
#include <iostream>
namespace std{
    class ATM
    {
        double minWithdrawal;
        int maxChangeQuantity;
        int UAH[N];
        int faceValue[N];
        int quantityDecrement[N];
        public:
          ATM();
          void initValue();
          double getMinWithdrawal();
          int getBalance();
          void getBalance_MSG();
          void cashWithdrawal(int withdraw);
};
}
#endif // ATM_H

//ATM.cpp
#include "ATM.h"
using namespace std;
ATM::ATM(){
    faceValue[0]=1;
    faceValue[1]=2;
    faceValue[2]=5;
    faceValue[3]=10;
    faceValue[4]=20;
    faceValue[5]=50;
    faceValue[6]=100;
    faceValue[7]=200;
    faceValue[8]=500;
    minWithdrawal=1;
    maxChangeQuantity=50;
};
void ATM::initValue(){
        for(int i=0;i<9;i++){
            cin>>UAH[i];
            quantityDecrement[i]=0;
        }
        cout<<"Complete\n";
        return;
    }
    double ATM::getMinWithdrawal(){
        int i;
        for(i=0;i<9;i++){
            if(UAH[i]*faceValue[i]<=UAH[i+1]*faceValue[i+1]) break;
        }
        return faceValue[i];
    }
    int ATM::getBalance(){
        int sum=0;
        for(int i=0; i<9; i++){
            // cout<<i<<". UAH="<<UAH[i]<<" faceValue="<<faceValue[i]<<endl; //DEBUG
            sum+=UAH[i]*faceValue[i];
        }
        return sum;
    }
    void ATM::getBalance_MSG(){
      int sum = getBalance();
      cout << "Current balance of the ATM is: " << sum << " UAH" << endl;
    }
    void ATM::cashWithdrawal(int withdraw){
        int quantity=0;
        minWithdrawal=getMinWithdrawal();
        if (withdraw>=minWithdrawal && withdraw<=getBalance()){
            for(int i=8; i>=0; i--){
            if(withdraw/faceValue[i]>=1 && UAH[i]>0){
              int diff=quantity;
              quantity+=withdraw/faceValue[i];
              diff=quantity-diff;
              if(diff>=UAH[i]){
                quantityDecrement[i]=UAH[i];
                diff-=UAH[i];
                quantity+=diff;
                quantity-=withdraw/faceValue[i];
                withdraw-=UAH[i]*faceValue[i];
              }
              else{
                quantityDecrement[i]=diff;
                withdraw-=diff*faceValue[i];
              }
            }
          }
            if(quantity<=maxChangeQuantity){
              for(int i=8; i>=0; i--){
                UAH[i]-=quantityDecrement[i];
              }
              getBalance_MSG();
            }
        else cout<<"The requested amount of money is unavailable due to lack of specific face values in  Try other sum."<<endl;
        for (int i=0; i<9;i++){
          quantityDecrement[i]=0;
        }
    }
    else cout<<"The requested amount of money is unavailable due to lack of money in  Try other sum."<<endl;
    return;
    }

//Bank.h
#ifndef BANK_H
#define BANK_H
#define B 4
#include "ATM.h"
#include <iostream>
namespace std{
  class Bank
  {
    public:
      Bank();
      ATM bankATM[B];
      void initBank();
      int getBankTotalBalance();
      void getBankTotalBalance_MSG();
  };
}
#endif // BANK_H

//Bank.cpp
#include "Bank.h"
using namespace std;
Bank::Bank(){
};
void Bank::initBank(){
  for(int i=0; i<B; i++){
    cout<<"ATM #"<<i<<endl;
    bankATM[i].initValue();
  }
  return;
}
int Bank::getBankTotalBalance(){
  int bankTotalBalance=0;
  for (int i=0; i<B; i++){
    bankTotalBalance+=bankATM[i].getBalance();
  }
  return bankTotalBalance;
}
void Bank::getBankTotalBalance_MSG(){
  cout<<"Bank total balance = "<<getBankTotalBalance()<<endl;
  return;
}

//main.cpp
#include <iostream>
#include "ATM.h"
#include "Bank.h"
using namespace std;

int main(){
    cout<<"                 Initiating bank                           "<<endl;
    Bank BetaBank;
    BetaBank.initBank();
    cout<<"Select ATM ID [i]. To exit enter 0"<<endl;
    int atmID;
    while(atmID!=0){
      cin>>atmID;
      int t=atmID-1;
      BetaBank.getBankTotalBalance_MSG();
      cout<<"------------------------ATM"<<atmID<<"---------------------------\n";
      BetaBank.bankATM[t].getBalance_MSG();
      cout<<endl<<"1 - Resuply ATM with money                           Withdraw money - 2"<<endl<<"9 - Terminate session                 Check balance - 3"<<endl;
      bool sessionTerminated = false;
      while(sessionTerminated==false){
          int input;
          cin>>input;
          if(input==1){
              BetaBank.bankATM[t].initValue();
          }
          else if(input==2){
              int request;
              cout<<"Enter requested value"<<endl;
              cin>>request;
              BetaBank.bankATM[t].cashWithdrawal(request);
          }
          else if(input==3) BetaBank.bankATM[t].getBalance_MSG();
          else if(input==9) sessionTerminated=true;
          input=0;
      }
      BetaBank.getBankTotalBalance_MSG();
    }
    cout<<"Goodbye!"<<endl;
    return 0;
}

